/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace cAudio {

using System;
using System.Runtime.InteropServices;

public class IListener : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IListener(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IListener obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IListener() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cAudioCSharpWrapperPINVOKE.delete_IListener(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual void setPosition(SWIGTYPE_p_cVector3 pos) {
    cAudioCSharpWrapperPINVOKE.IListener_setPosition(swigCPtr, SWIGTYPE_p_cVector3.getCPtr(pos));
    if (cAudioCSharpWrapperPINVOKE.SWIGPendingException.Pending) throw cAudioCSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setDirection(SWIGTYPE_p_cVector3 dir) {
    cAudioCSharpWrapperPINVOKE.IListener_setDirection(swigCPtr, SWIGTYPE_p_cVector3.getCPtr(dir));
    if (cAudioCSharpWrapperPINVOKE.SWIGPendingException.Pending) throw cAudioCSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setUpVector(SWIGTYPE_p_cVector3 up) {
    cAudioCSharpWrapperPINVOKE.IListener_setUpVector(swigCPtr, SWIGTYPE_p_cVector3.getCPtr(up));
    if (cAudioCSharpWrapperPINVOKE.SWIGPendingException.Pending) throw cAudioCSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setVelocity(SWIGTYPE_p_cVector3 vel) {
    cAudioCSharpWrapperPINVOKE.IListener_setVelocity(swigCPtr, SWIGTYPE_p_cVector3.getCPtr(vel));
    if (cAudioCSharpWrapperPINVOKE.SWIGPendingException.Pending) throw cAudioCSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setMasterVolume(float volume) {
    cAudioCSharpWrapperPINVOKE.IListener_setMasterVolume(swigCPtr, volume);
  }

  public virtual void move(SWIGTYPE_p_cVector3 pos) {
    cAudioCSharpWrapperPINVOKE.IListener_move(swigCPtr, SWIGTYPE_p_cVector3.getCPtr(pos));
    if (cAudioCSharpWrapperPINVOKE.SWIGPendingException.Pending) throw cAudioCSharpWrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_cVector3 getPosition() {
    SWIGTYPE_p_cVector3 ret = new SWIGTYPE_p_cVector3(cAudioCSharpWrapperPINVOKE.IListener_getPosition(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_cVector3 getDirection() {
    SWIGTYPE_p_cVector3 ret = new SWIGTYPE_p_cVector3(cAudioCSharpWrapperPINVOKE.IListener_getDirection(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_cVector3 getUpVector() {
    SWIGTYPE_p_cVector3 ret = new SWIGTYPE_p_cVector3(cAudioCSharpWrapperPINVOKE.IListener_getUpVector(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_cVector3 getVelocity() {
    SWIGTYPE_p_cVector3 ret = new SWIGTYPE_p_cVector3(cAudioCSharpWrapperPINVOKE.IListener_getVelocity(swigCPtr), true);
    return ret;
  }

  public virtual float getMasterVolume() {
    float ret = cAudioCSharpWrapperPINVOKE.IListener_getMasterVolume(swigCPtr);
    return ret;
  }

}

}
